generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MongoDBURL") // uses connection pooling
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId //@map is specific to mongo db
  email           String   @unique
  name            String  @unique
  provider        String?
  password        String?
  imagePath       String?
  createdAt       DateTime  @default(now())
  active          Boolean         @default(false) //this is for the email verification it needs to be active true 
  products        Product[]
  favorites       Favorite[]
  cartItems       CartItem[]
  confirmedOrders ConfirmedOrder[]
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId //@map is specific to mongo db
  name           String
  price          Float
  imageLink      String
  quantity       Int
  description    String?
  category       Category
  gender         Gender
  user           User @relation(fields: [userId], references: [id])
  userId         String @db.ObjectId
  favorites      Favorite[]
  cartItems      CartItem[]
  ConfirmedItems ConfirmedItem[]
}

model Favorite {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId //@map is specific to mongo db
  user          User @relation(fields: [userId], references: [id])
  userId        String @db.ObjectId
  product       Product @relation(fields: [productId], references: [id])
  productId     String @db.ObjectId
}

model CartItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId //@map is specific to mongo db
  user          User @relation(fields: [userId], references: [id])
  userId        String @db.ObjectId
  product       Product @relation(fields: [productId], references: [id])
  productId     String @db.ObjectId
  cartQuantity  Int
  status        Status @default(PENDING)
}

model ConfirmedOrder {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId //@map is specific to mongo db
  user            User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String? @db.ObjectId
  totalPrice      Float
  paymentMethod   String
  DeliverStatus   Delivery
  confirmedItems  ConfirmedItem[]
}

model ConfirmedItem{
  id                String   @id @default(auto()) @map("_id") @db.ObjectId //@map is specific to mongo db
  ConfirmedOrder    ConfirmedOrder? @relation(fields: [ConfirmedOrderId], references: [id], onDelete: SetNull)
  ConfirmedOrderId  String? @db.ObjectId
  product           Product @relation(fields: [productId], references: [id])
  productId         String @db.ObjectId
  Quantity          Int
  BoughtPrice       Float
}

enum Category {
  TOP
  BOTTOM
  DRESS
  ACTIVEWEAR
  OUTERWEAR
  ACCESSORY
  FOOTWEAR
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum Status {
  ORDERED
  PENDING
}

enum Delivery {
  PENDING
  SUCCESS
  DELAYED
  ISSUE
}